name: 'Run Squidler Test'
description: 'Runs the Squidler CLI test tool.'
author: 'Squidler'

# Define Inputs for the Action
inputs:
  api-key:
    description: 'Your Squidler Site API Key (should usually be a secret).'
    required: true
  duration:
    description: 'Duration of the test in seconds.'
    required: false
    default: '10'
  cli-version:
    description: 'Specify a version of squidler-action-runner to use (e.g., latest, 1.0.0).'
    required: false
    default: '1.0.0'
  fail-on-problems:
    description: 'Make the action step fail if any problems are found by the CLI.'
    required: false
    default: 'false'
  fail-on-new-problems:
    description: 'Make the action step fail if any new problems are found by the CLI.'
    required: false
    default: 'false'
  suites:
    description: 'Comma-separated list of test suites to run (e.g., Accessibility,Functionality,Language).'
    required: false
  include-recreations:
    description: 'Include recreations in the test (default: true).'
    required: false

# Define Outputs for the Action
outputs:
  problem-count:
    description: "The total number of problems found in the report (set by CLI)."
  exit-code:
    description: "The raw exit code from the squidler-cli script."
    value: ${{ steps.run_cli.outputs.exit_code }}

runs:
  using: "composite"
  steps:
    - name: Construct CLI Command
      id: construct_cmd
      shell: bash
      run: |
        # Base command with required args using the action runner package
        CMD="npx @squidlerio/squidler-action-runner@${{ inputs.cli-version }} test --apikey '${{ inputs.api-key }}'"

        # Add optional flags
        if [ -n "${{ inputs.duration }}" ]; then CMD+=" --duration ${{ inputs.duration }}"; fi
        if [ "${{ inputs.fail-on-problems }}" == "true" ]; then CMD+=" --fail-on-problems"; fi
        if [ "${{ inputs.fail-on-new-problems }}" == "true" ]; then CMD+=" --fail-on-new-problems"; fi
        if [ -n "${{ inputs.suites }}" ]; then CMD+=" --suites ${{ inputs.suites }}"; fi
        if [ -n "${{ inputs.include-recreations }}" ]; then
          if [ "${{ inputs.include-recreations }}" == "false" ]; then
            CMD+=" --no-include-recreations"
          else
            CMD+=" --include-recreations"
          fi
        fi

        echo "Constructed command: ${CMD}"
        echo "cmd=$CMD" >> $GITHUB_OUTPUT

    - name: Run Squidler CLI
      id: run_cli
      shell: bash
      run: |
        # Run the command. CLI handles outputs/summary internally when in Actions.
        # CLI exits with non-zero code if --fail-on-problems=true and problems exist.
        ${{ steps.construct_cmd.outputs.cmd }}
        EXIT_CODE=$?
        # Output the raw exit code for the action's output
        echo "exit_code=${EXIT_CODE}" >> $GITHUB_OUTPUT
        # Exit the step with the script's exit code
        exit ${EXIT_CODE}

branding:
  icon: 'check-circle'
  color: 'blue'
